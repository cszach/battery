#!/bin/bash

# battery - Print the battery level.
#
# This work is licensed under the Creative Commons Zero v1.0 Universal and
# therefore belongs to the public domain. For more information, please visit:
#
#     https://creativecommons.org/publicdomain/zero/1.0

VERSION="2.0"

# SET ALIASES FOR SECURITY

alias echo="/usr/bin/echo" cat="/usr/bin/cat"

# PRINT HELP FUNCTION

function print_help() {
    printf "\
battery - Print the battery level.\n\
\n\
Usage: battery [--color=WHEN] [--percentage] [SOURCE]\n\
\n\
Options:\n\
\n\
  -h, --help        Print this help.\n\
  -v, --version     Print this program's version.\n\
  -l, --list        List detected power supplies.\n\
  --color=WHEN      Colorize the output; WHEN can be either 'charging',\n\
                    'discharging' (default), 'full', 'unknown', 'always', or\n\
                    'never'.\n\
  -%%, -p, -percent, --percentage\n\
                    Print the percentage sign.\n\
\n\
Examples:\n\
\n\
  battery\n\
    Attempt to find a power source and print its level.\n\
\n\
  battery --list\n\
    List power sources.\n\
\n\
  battery BAT0\n\
    Print the level of BAT0 and color the output if BAT0 is discharging.\n\
\n\
  battery --color=always BAT1\n\
    Print the level of BAT1 and color the output regardless of its\n\
    charging state.\n"
}

# GENERIC OPTIONS

[ "$1" = "-h" ] || [ "$1" = "--help" ] && print_help && exit 0

[ "$1" = "-v" ] || [ "$1" = "--version" ] && echo $VERSION && exit 0

# DETERMINE POWER SUPPLY

SYS_POWER_SUPPLY_DIR="/sys/class/power_supply"

[ "$1" = "-l" ] || [ "$1" = "--list" ] \
    && ls -1 "$SYS_POWER_SUPPLY_DIR" && exit 0

# PARSE COMMAND LINE ARGUMENTS

color_when="discharging" # charging|discharging|full|unknown|always|never
show_percent=false
battery=
debugging=false

function check_color_when() {
    [ "$color_when" != "charging"    ] && \
    [ "$color_when" != "discharging" ] && \
    [ "$color_when" != "full"        ] && \
    [ "$color_when" != "unknown"     ] && \
    [ "$color_when" != "always"      ] && \
    [ "$color_when" != "never"       ] && \
        echo "Invalid value for '--color'." >&2 && exit 1
}

for _ in "$@"
do
    case "$1" in

        --color=*)
            color_when="${1#*=}"
            check_color_when
            ;;

        --color)
            color_when="$2"
            check_color_when
            shift
            ;;

        -% | -p | --percent | --percentage)
            show_percent=true
            ;;
        
        --debug)
            debugging=true
            ;;

        "--") # End of options
            [ -n "$2" ] && battery="$2"
            break
            ;;

        "-"*)
            echo "Invalid argument '$1'." >&2
            exit 1
            ;;

        *)
            battery="$1"
            break
            ;;
    esac

    shift
done

# If a battery identifier was not specified, attempt to find BAT0 and BAT1.

[ -z "$battery" ] && \
    if [ -e "$SYS_POWER_SUPPLY_DIR"/BAT0 ]
    then
        battery="BAT0"
    elif [ -e "$SYS_POWER_SUPPLY_DIR"/BAT1 ]
    then
        battery="BAT1"
    fi

# If no battery is found, exit

[ -z "$battery" ] && \
    echo "No battery was auto-detected. Use '-l' to list batteries." >&2 && \
    exit 2

# Otherwise, get information about battery

battery_path="$SYS_POWER_SUPPLY_DIR/$battery"
battery_level=
battery_status=

! [ -e "$battery_path" ] && \
    echo "Power supply '$battery' not found." >&2 && \
    exit 2

# ACCESS POWER SUPPLY'S LEVEL AND STATUS

if [ -e "$battery_path"/capacity ]
then
    battery_level=$(cat "$battery_path"/capacity)
else
    echo "Could not access $battery's level." >&2
    exit 3
fi

if [ -e "$battery_path"/status ]
then
    battery_status=$(cat "$battery_path"/status)
else
    echo "Could not access $battery's status. Assuming to be discharging." >&2
    battery_status="Discharging"
fi

# DEBUGGING

if [ $debugging = true ]
then
    echo -e "\
color_when     = $color_when\n\
show_percent   = $show_percent\n\
battery        = $battery\n\
battery_path   = $battery_path\n\
battery_level  = $battery_level\n\
battery_status = $battery_status"
fi

# DETERMINE OUTPUT COLORIZATION

color=""  # Text color
attr=""   # Text attribute

if [ "$color_when" = "always" ] || [ "$color_when" = "${battery_status,,}" ] \
|| { [ "$color_when" = "discharging" ] && [ "$battery_status" = "Discharging" ]; }
then
    [ "$battery_level" -le 100 ] && color=32 && attr=1  # 76-100 (bold green)
    [ "$battery_level" -le 75 ] && attr=0               # 51-75 (normal green)
    [ "$battery_level" -le 50 ] && color=33 && attr=1   # 26-50 (bold yellow)
    [ "$battery_level" -le 25 ] && color=31 && attr=0   # 11-25 (normal red)
    [ "$battery_level" -le 10 ] && attr=1               # 1-10 (bold red)
fi

# PRINT LEVEL

PERCENT=""
[ $show_percent = true ] && PERCENT="%"

echo -e '\033['"$attr"';'"$color"'m'"$battery_level$PERCENT\033[0m"

# UNALIAS & EXIT

unalias echo cat
exit 0
